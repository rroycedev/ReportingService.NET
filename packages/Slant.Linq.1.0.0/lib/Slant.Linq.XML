<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slant.Linq</name>
    </assembly>
    <members>
        <member name="T:System.Linq.AggregateExtensions">
            <summary> 
            Extension methods for expression tree balancing. 
            </summary>
        </member>
        <member name="M:System.Linq.AggregateExtensions.AggregateBalanced``1(``0[],System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,``0})">
            <summary>
            Generates balanced binary trees for list of conditions.
            <para>E.g.: AndAlso or OrElse</para>
            <para>The reason is avoid StackOverFlowExceptions:</para>
            <para>var result = lambdas.Aggregate(AndAlso); // StackOverflow when lambdas.Lenght is 20 000</para>
            <para>var result = lambdas.AggregateBalanced(AndAlso); // Ok still when lambdas.Lenght is 1 000 000</para>
            </summary>
        </member>
        <member name="M:System.Linq.AggregateExtensions.AggregateBalanced``1(System.Linq.Expressions.Expression{``0}[],System.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0}})">
            <summary>
            Generates balanced binary trees for list of conditions. Generic version.
            <para>E.g.: AndAlso or OrElse</para>
            <para>The reason is avoid StackOverFlowExceptions:</para>
            <para>var result = lambdas.Aggregate(AndAlso); // StackOverflow when lambdas.Lenght is 20 000</para>
            <para>var result = lambdas.AggregateBalanced(AndAlso); // Ok still when lambdas.Lenght is 1 000 000</para>
            </summary>
        </member>
        <member name="M:System.Linq.AggregateExtensions.AggregateBalancedAsync``1(``0[],System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,``0})">
            <summary>
            Generates balanced binary trees for list of conditions.
            <para>E.g.: AndAlso or OrElse</para>
            <para>The reason is avoid StackOverFlowExceptions:</para>
            <para>var result = lambdas.Aggregate(AndAlso); // StackOverflow when lambdas.Lenght is 20 000</para>
            <para>var result = lambdas.AggregateBalanced(AndAlso); // Ok still when lambdas.Lenght is 1 000 000</para>
            </summary>
        </member>
        <member name="M:System.Linq.AggregateExtensions.AggregateBalancedAsync``1(System.Linq.Expressions.Expression{``0}[],System.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0}})">
            <summary>
            Generates balanced binary trees for list of conditions. Generic version.
            <para>E.g.: AndAlso or OrElse</para>
            <para>The reason is avoid StackOverFlowExceptions:</para>
            <para>var result = lambdas.Aggregate(AndAlso); // StackOverflow when lambdas.Lenght is 20 000</para>
            <para>var result = lambdas.AggregateBalanced(AndAlso); // Ok still when lambdas.Lenght is 1 000 000</para>
            </summary>
        </member>
        <member name="T:Slant.Linq.ExpressionExpander">
            <summary>
            Custom expresssion visitor for ExpandableQuery. This expands calls to Expression.Compile() and
            collapses captured lambda references in subqueries which LINQ to SQL can't otherwise handle.
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionExpander.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Flatten calls to Invoke so that Entity Framework can understand it. 
            Calls to Invoke are generated by PredicateBuilder.
            </summary>
        </member>
        <member name="T:Slant.Linq.ExpressionVisitor">
            <summary>
            This comes from Matt Warren's sample:
            http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary> 
            Visit expression tree 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary> 
            Visit member binding 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary> 
            Visit element initializer 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary> 
            Visit one-parameter expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary> 
            Visit two-parameter expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary> 
            Visit type-is expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary> 
            Return constant expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary> 
            Simplify conditional expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary> 
            Return parameter expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary> 
            Visit member access 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary> 
            Visit method call 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary> 
            Visit list of expressions
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary> 
            Visit member assignment 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary> 
            Visit member binding 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary> 
            Visit member list binding 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary> 
            Visit list of bindings 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary> 
            Visit list of element-initializers 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary> 
            Visit lambda expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary> 
            Visit new-expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary> 
            Visit member init expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary> 
            Visit list init expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary> 
            Visit array expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary> 
            Visit invocation expression 
            </summary>
        </member>
        <member name="T:Slant.Linq.Extensions">
            <summary>
            Refer to http://www.albahari.com/nutshell/linqkit.html and
            http://tomasp.net/blog/linq-expand.aspx for more information.
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Expand``1(System.Linq.Expressions.Expression{``0})">
            <summary> 
            Expands expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Expand(System.Linq.Expressions.Expression)">
            <summary> 
            Expands expression 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},``0,``1)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},``0,``1,``2)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},``0,``1,``2,``3)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},``0,``1,``2,``3,``4)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},``0,``1,``2,``3,``4,``5)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},``0,``1,``2,``3,``4,``5,``6)">
            <summary> 
            Compile and invoke 
            </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.Invoke``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary> Compile and invoke </summary>
        </member>
        <member name="M:Slant.Linq.Extensions.LeftJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to left join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>An System.Linq.IQueryable&lt;TResult&gt; that has elements of type TResult obtained by performing an inner join on two sequences.</returns>
        </member>
        <member name="M:Slant.Linq.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary> Default side-effect style enumeration </summary>
        </member>
        <member name="T:Slant.Linq.Linq">
            <summary>
            Another good idea by Tomas Petricek.
            See http://tomasp.net/blog/dynamic-linq-queries.aspx for information on how it's used.
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Expr``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the given anonymous method as a lambda expression
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Predicate``1(Slant.Linq.LinqBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Simplify predicate assignment
            </summary>
            <param name="src"></param>
            <param name="expr"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Slant.Linq.Linq.Getter``2(Slant.Linq.LinqBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Simplify getter assignment
            </summary>
            <param name="src"></param>
            <param name="expr"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Slant.Linq.Linq.Expr``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the given anonymous method as a lambda expression
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Expr``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Returns the given anonymous method as a lambda expression
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Func``1(System.Func{``0})">
            <summary>
            Returns the given anonymous function as a Func delegate
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Func``2(System.Func{``0,``1})">
            <summary>
            Returns the given anonymous function as a Func delegate
            </summary>
        </member>
        <member name="M:Slant.Linq.Linq.Func``3(System.Func{``0,``1,``2})">
            <summary>
            Returns the given anonymous function as a Func delegate
            </summary>
        </member>
        <member name="T:Slant.Linq.Let`1">
            <summary>
            F#-style let declarations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Slant.Linq.Let`1.Predicate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Predicate
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Slant.Linq.Let`1.Getter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Getter
            </summary>
            <param name="expr"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Slant.Linq.Let`1.Expr``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Expression
            </summary>
            <param name="expr"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Slant.Linq.LinqBuilder`1">
            <summary>
            Helper class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Slant.Linq.LinqBuilder`1.Get">
            <summary>
            Get LinqBuilder for a given type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slant.Linq.LinqBuilderExtensions">
            <summary>
            Useful extensions
            </summary>
        </member>
        <member name="M:Slant.Linq.LinqBuilderExtensions.Linq``1(``0)">
            <summary>
            Get LinqBuilder for a given type
            </summary>
            <param name="o"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Slant.Linq.LinqBuilderExtensions.Subject``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Return LinqBuilder for input argument of an expression
            </summary>
            <param name="o"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Slant.Linq.PredicateBuilder">
            <summary>
            See http://www.albahari.com/expressions for information and examples.
            </summary>
        </member>
        <member name="M:Slant.Linq.PredicateBuilder.True``1">
            <summary> 
            Always true 
            </summary>
        </member>
        <member name="M:Slant.Linq.PredicateBuilder.False``1">
            <summary> 
            Always false 
            </summary>
        </member>
        <member name="M:Slant.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> 
            OR 
            </summary>
        </member>
        <member name="M:Slant.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary> 
            AND 
            </summary>
        </member>
    </members>
</doc>
